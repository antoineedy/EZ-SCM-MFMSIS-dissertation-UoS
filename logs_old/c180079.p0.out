[i 0807 16:14:56.423535 08 lock.py:85] Create lock file:/user/HS400/ae01116/.cache/jittor/jt1.3.7/g++7.5.0/py3.9.19/Linux-4.18.0-4x9a/AMDEPYC750232-x2a/jittor.lock
[i 0807 16:14:56.522688 08 compiler.py:955] Jittor(1.3.7.16) src: /mnt/fast/nobackup/scratch4weeks/ae01116/zegenv/lib/python3.9/site-packages/jittor
[i 0807 16:14:56.526710 08 compiler.py:956] g++ at /usr/bin/g++(7.5.0)
[i 0807 16:14:56.526805 08 compiler.py:957] cache_path: /user/HS400/ae01116/.cache/jittor/jt1.3.7/g++7.5.0/py3.9.19/Linux-4.18.0-4x9a/AMDEPYC750232-x2a/default
[i 0807 16:14:56.531852 08 compiler.py:900] Found nvcc(11.0.221) at /usr/local/cuda/bin/nvcc
[i 0807 16:14:56.542323 08 __init__.py:411] Found addr2line(2.30) at /usr/bin/addr2line.
[i 0807 16:14:56.695567 08 compiler.py:1010] cuda key:cu11.0.221_sm_75
[i 0807 16:14:56.734636 08 compiler.py:34] Create cache dir: /user/HS400/ae01116/.cache/jittor/jt1.3.7/g++7.5.0/py3.9.19/Linux-4.18.0-4x9a/AMDEPYC750232-x2a/default/cu11.0.221_sm_75
[i 0807 16:14:56.737629 08 compiler.py:34] Create cache dir: /user/HS400/ae01116/.cache/jittor/jt1.3.7/g++7.5.0/py3.9.19/Linux-4.18.0-4x9a/AMDEPYC750232-x2a/default/cu11.0.221_sm_75/jit
[i 0807 16:14:56.739145 08 compiler.py:34] Create cache dir: /user/HS400/ae01116/.cache/jittor/jt1.3.7/g++7.5.0/py3.9.19/Linux-4.18.0-4x9a/AMDEPYC750232-x2a/default/cu11.0.221_sm_75/obj_files
[i 0807 16:14:56.740628 08 compiler.py:34] Create cache dir: /user/HS400/ae01116/.cache/jittor/jt1.3.7/g++7.5.0/py3.9.19/Linux-4.18.0-4x9a/AMDEPYC750232-x2a/default/cu11.0.221_sm_75/gen
[i 0807 16:14:56.742278 08 compiler.py:34] Create cache dir: /user/HS400/ae01116/.cache/jittor/jt1.3.7/g++7.5.0/py3.9.19/Linux-4.18.0-4x9a/AMDEPYC750232-x2a/default/cu11.0.221_sm_75/tmp
[i 0807 16:14:56.744344 08 compiler.py:34] Create cache dir: /user/HS400/ae01116/.cache/jittor/jt1.3.7/g++7.5.0/py3.9.19/Linux-4.18.0-4x9a/AMDEPYC750232-x2a/default/cu11.0.221_sm_75/checkpoints
Compiling jittor_core(20/151) used: 2.017s eta: 13.210sCompiling jittor_core(21/151) used: 2.092s eta: 12.949sCompiling jittor_core(22/151) used: 2.093s eta: 12.275sCompiling jittor_core(23/151) used: 2.124s eta: 11.821sCompiling jittor_core(24/151) used: 2.277s eta: 12.047sCompiling jittor_core(25/151) used: 2.309s eta: 11.639sCompiling jittor_core(26/151) used: 2.343s eta: 11.266sCompiling jittor_core(27/151) used: 2.452s eta: 11.260sCompiling jittor_core(28/151) used: 2.479s eta: 10.888sCompiling jittor_core(29/151) used: 2.629s eta: 11.060sCompiling jittor_core(30/151) used: 2.832s eta: 11.422sCompiling jittor_core(31/151) used: 3.074s eta: 11.899sCompiling jittor_core(32/151) used: 3.161s eta: 11.754sCompiling jittor_core(33/151) used: 3.185s eta: 11.387sCompiling jittor_core(34/151) used: 3.409s eta: 11.730sCompiling jittor_core(35/151) used: 3.420s eta: 11.336sCompiling jittor_core(36/151) used: 3.461s eta: 11.056sCompiling jittor_core(37/151) used: 3.513s eta: 10.824sCompiling jittor_core(38/151) used: 3.554s eta: 10.569sCompiling jittor_core(39/151) used: 3.600s eta: 10.338sCompiling jittor_core(40/151) used: 3.716s eta: 10.313sCompiling jittor_core(41/151) used: 3.733s eta: 10.015sCompiling jittor_core(42/151) used: 3.861s eta: 10.019sCompiling jittor_core(43/151) used: 3.913s eta: 9.828sCompiling jittor_core(44/151) used: 4.166s eta: 10.131sCompiling jittor_core(45/151) used: 4.468s eta: 10.525sCompiling jittor_core(46/151) used: 4.473s eta: 10.210sCompiling jittor_core(47/151) used: 4.492s eta: 9.939sCompiling jittor_core(48/151) used: 4.704s eta: 10.094sCompiling jittor_core(49/151) used: 4.718s eta: 9.822sCompiling jittor_core(50/151) used: 4.868s eta: 9.833sCompiling jittor_core(51/151) used: 4.989s eta: 9.782sCompiling jittor_core(52/151) used: 5.054s eta: 9.623sCompiling jittor_core(53/151) used: 5.073s eta: 9.381sCompiling jittor_core(54/151) used: 5.113s eta: 9.184sCompiling jittor_core(55/151) used: 5.221s eta: 9.113sCompiling jittor_core(56/151) used: 5.333s eta: 9.046sCompiling jittor_core(57/151) used: 5.451s eta: 8.989sCompiling jittor_core(58/151) used: 5.480s eta: 8.786sCompiling jittor_core(59/151) used: 5.765s eta: 8.989sCompiling jittor_core(60/151) used: 5.787s eta: 8.777sCompiling jittor_core(61/151) used: 5.788s eta: 8.539sCompiling jittor_core(62/151) used: 5.986s eta: 8.593sCompiling jittor_core(63/151) used: 5.988s eta: 8.364sCompiling jittor_core(64/151) used: 6.006s eta: 8.165sCompiling jittor_core(65/151) used: 6.016s eta: 7.959sCompiling jittor_core(66/151) used: 6.026s eta: 7.760sCompiling jittor_core(67/151) used: 6.374s eta: 7.991sCompiling jittor_core(68/151) used: 6.428s eta: 7.846sCompiling jittor_core(69/151) used: 6.443s eta: 7.657sCompiling jittor_core(70/151) used: 6.526s eta: 7.552sCompiling jittor_core(71/151) used: 6.573s eta: 7.407sCompiling jittor_core(72/151) used: 6.625s eta: 7.269sCompiling jittor_core(73/151) used: 6.741s eta: 7.203sCompiling jittor_core(74/151) used: 6.857s eta: 7.135sCompiling jittor_core(75/151) used: 6.870s eta: 6.962sCompiling jittor_core(76/151) used: 6.916s eta: 6.825sCompiling jittor_core(77/151) used: 6.941s eta: 6.670sCompiling jittor_core(78/151) used: 6.956s eta: 6.510sCompiling jittor_core(79/151) used: 7.036s eta: 6.412sCompiling jittor_core(80/151) used: 7.114s eta: 6.313sCompiling jittor_core(81/151) used: 7.121s eta: 6.154sCompiling jittor_core(82/151) used: 7.165s eta: 6.029sCompiling jittor_core(83/151) used: 7.253s eta: 5.943sCompiling jittor_core(84/151) used: 7.299s eta: 5.822sCompiling jittor_core(85/151) used: 7.371s eta: 5.723sCompiling jittor_core(86/151) used: 7.390s eta: 5.585sCompiling jittor_core(87/151) used: 7.450s eta: 5.481sCompiling jittor_core(88/151) used: 7.503s eta: 5.371sCompiling jittor_core(89/151) used: 7.580s eta: 5.281sCompiling jittor_core(90/151) used: 7.692s eta: 5.213sCompiling jittor_core(91/151) used: 7.745s eta: 5.107sCompiling jittor_core(92/151) used: 7.747s eta: 4.968sCompiling jittor_core(93/151) used: 7.755s eta: 4.837sCompiling jittor_core(94/151) used: 7.852s eta: 4.761sCompiling jittor_core(95/151) used: 7.881s eta: 4.646sCompiling jittor_core(96/151) used: 7.961s eta: 4.561sCompiling jittor_core(97/151) used: 7.990s eta: 4.448sCompiling jittor_core(98/151) used: 8.020s eta: 4.337sCompiling jittor_core(99/151) used: 8.022s eta: 4.214sCompiling jittor_core(100/151) used: 8.196s eta: 4.180sCompiling jittor_core(101/151) used: 8.259s eta: 4.088sCompiling jittor_core(102/151) used: 8.513s eta: 4.090sCompiling jittor_core(103/151) used: 8.517s eta: 3.969sCompiling jittor_core(104/151) used: 8.530s eta: 3.855sCompiling jittor_core(105/151) used: 8.546s eta: 3.744sCompiling jittor_core(106/151) used: 8.568s eta: 3.637sCompiling jittor_core(107/151) used: 8.739s eta: 3.594sCompiling jittor_core(108/151) used: 8.801s eta: 3.504sCompiling jittor_core(109/151) used: 8.856s eta: 3.413sCompiling jittor_core(110/151) used: 8.883s eta: 3.311sCompiling jittor_core(111/151) used: 8.978s eta: 3.235sCompiling jittor_core(112/151) used: 9.032s eta: 3.145sCompiling jittor_core(113/151) used: 9.033s eta: 3.038sCompiling jittor_core(114/151) used: 9.052s eta: 2.938sCompiling jittor_core(115/151) used: 9.076s eta: 2.841sCompiling jittor_core(116/151) used: 9.226s eta: 2.784sCompiling jittor_core(117/151) used: 9.253s eta: 2.689sCompiling jittor_core(118/151) used: 9.286s eta: 2.597sCompiling jittor_core(119/151) used: 9.377s eta: 2.522sCompiling jittor_core(120/151) used: 9.493s eta: 2.452sCompiling jittor_core(121/151) used: 9.533s eta: 2.364sCompiling jittor_core(122/151) used: 9.690s eta: 2.303sCompiling jittor_core(123/151) used: 9.716s eta: 2.212sCompiling jittor_core(124/151) used: 9.770s eta: 2.127sCompiling jittor_core(125/151) used: 9.789s eta: 2.036sCompiling jittor_core(126/151) used: 9.795s eta: 1.943sCompiling jittor_core(127/151) used: 9.828s eta: 1.857sCompiling jittor_core(128/151) used: 9.854s eta: 1.771sCompiling jittor_core(129/151) used: 9.872s eta: 1.684sCompiling jittor_core(130/151) used: 9.879s eta: 1.596sCompiling jittor_core(131/151) used: 10.208s eta: 1.559sCompiling jittor_core(132/151) used: 10.213s eta: 1.470sCompiling jittor_core(133/151) used: 10.256s eta: 1.388sCompiling jittor_core(134/151) used: 10.328s eta: 1.310sCompiling jittor_core(135/151) used: 10.359s eta: 1.228sCompiling jittor_core(136/151) used: 10.418s eta: 1.149sCompiling jittor_core(137/151) used: 10.516s eta: 1.075sCompiling jittor_core(138/151) used: 10.831s eta: 1.020sCompiling jittor_core(139/151) used: 10.872s eta: 0.939sCompiling jittor_core(140/151) used: 10.887s eta: 0.855sCompiling jittor_core(141/151) used: 10.909s eta: 0.774sCompiling jittor_core(142/151) used: 10.934s eta: 0.693sCompiling jittor_core(143/151) used: 11.098s eta: 0.621sCompiling jittor_core(144/151) used: 11.197s eta: 0.544sCompiling jittor_core(145/151) used: 11.225s eta: 0.464sCompiling jittor_core(146/151) used: 11.725s eta: 0.402sCompiling jittor_core(147/151) used: 11.769s eta: 0.320sCompiling jittor_core(148/151) used: 12.266s eta: 0.249sCompiling jittor_core(149/151) used: 12.681s eta: 0.170sCompiling jittor_core(150/151) used: 12.859s eta: 0.086sCompiling jittor_core(151/151) used: 18.013s eta: 0.000s
Compiling jittor_mpi_core(7/7) used: 2.005s eta: 0.000s
Compiling libcutt(8/9) used: 3.695s eta: 0.462sCompiling libcutt(9/9) used: 7.854s eta: 0.000s
Compiling gen_ops_mkl_conv_backward_x_mkl_conv_backward_w_mk___hasha70792(6/7) used: 2.180s eta: 0.363sCompiling gen_ops_mkl_conv_backward_x_mkl_conv_backward_w_mk___hasha70792(7/7) used: 2.317s eta: 0.000s
Compiling gen_ops_cub_cumsum_cub_test_cub_where_cub_argsort____hash6d0e69(6/6) used: 2.203s eta: 0.000s
Compiling gen_ops_cudnn_conv_backward_x_cudnn_rnn_backward_x___hashf0a893(16/16) used: 3.594s eta: 0.000s
None
Using CUDA
Loading config from:  /mnt/fast/nobackup/users/ae01116/multi-modal-dissertation-uos/configs/voc12/clip_rc_zero_vit-b_512x512_40k_voc_10_16.py
Resize the pos_embed shape from (197, 768) to [1025,768,]
Making visible mask for zero-shot setting: [  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  -1  -1  -1
  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1
  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1
  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1
  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1
  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1
  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1
  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1
  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1
  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1
  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1
  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1
  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1
  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1
  -1  -1  -1 255]
--------------------------------------
Finetune layer in segmentor: backbone.prompt_embeddings
Finetune layer in segmentor: backbone.deep_prompt_embeddings
Finetune layer in segmentor: backbone.prompt_proj.weight
Finetune layer in segmentor: backbone.prompt_proj.bias
Finetune layer in segmentor: backbone.prompt_norm.weight
Finetune layer in segmentor: backbone.prompt_norm.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.0.linear1.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.0.linear2.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.0.norm2.weight
Finetune layer in segmentor: decode_head.decoder_q.layers.0.norm2.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.0.norm3.weight
Finetune layer in segmentor: decode_head.decoder_q.layers.0.norm3.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.0.multihead_attn.q.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.0.multihead_attn.k.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.0.multihead_attn.v.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.0.multihead_attn.proj.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.1.linear1.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.1.linear2.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.1.norm2.weight
Finetune layer in segmentor: decode_head.decoder_q.layers.1.norm2.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.1.norm3.weight
Finetune layer in segmentor: decode_head.decoder_q.layers.1.norm3.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.1.multihead_attn.q.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.1.multihead_attn.k.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.1.multihead_attn.v.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.1.multihead_attn.proj.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.2.linear1.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.2.linear2.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.2.norm2.weight
Finetune layer in segmentor: decode_head.decoder_q.layers.2.norm2.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.2.norm3.weight
Finetune layer in segmentor: decode_head.decoder_q.layers.2.norm3.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.2.multihead_attn.q.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.2.multihead_attn.k.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.2.multihead_attn.v.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.2.multihead_attn.proj.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.0.linear1.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.0.linear2.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.0.norm2.weight
Finetune layer in segmentor: decode_head.decoder_v.layers.0.norm2.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.0.norm3.weight
Finetune layer in segmentor: decode_head.decoder_v.layers.0.norm3.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.0.multihead_attn.q.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.0.multihead_attn.k.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.0.multihead_attn.v.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.0.multihead_attn.proj.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.1.linear1.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.1.linear2.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.1.norm2.weight
Finetune layer in segmentor: decode_head.decoder_v.layers.1.norm2.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.1.norm3.weight
Finetune layer in segmentor: decode_head.decoder_v.layers.1.norm3.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.1.multihead_attn.q.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.1.multihead_attn.k.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.1.multihead_attn.v.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.1.multihead_attn.proj.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.2.linear1.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.2.linear2.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.2.norm2.weight
Finetune layer in segmentor: decode_head.decoder_v.layers.2.norm2.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.2.norm3.weight
Finetune layer in segmentor: decode_head.decoder_v.layers.2.norm3.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.2.multihead_attn.q.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.2.multihead_attn.k.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.2.multihead_attn.v.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.2.multihead_attn.proj.bias
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_q.0.linear1.bias
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_q.0.linear2.bias
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_q.0.norm2.weight
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_q.0.norm2.bias
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_q.0.norm3.weight
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_q.0.norm3.bias
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_q.0.multihead_attn.q.bias
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_q.0.multihead_attn.k.bias
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_q.0.multihead_attn.v.bias
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_q.0.multihead_attn.proj.bias
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_v.0.linear1.bias
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_v.0.linear2.bias
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_v.0.norm2.weight
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_v.0.norm2.bias
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_v.0.norm3.weight
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_v.0.norm3.bias
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_v.0.multihead_attn.q.bias
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_v.0.multihead_attn.k.bias
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_v.0.multihead_attn.v.bias
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_v.0.multihead_attn.proj.bias
Finetune layer in segmentor: decode_head.recovery_decoder.linear_q_in.bias
Finetune layer in segmentor: decode_head.recovery_decoder.linear_k_in.bias
Finetune layer in segmentor: decode_head.recovery_decoder.linear_q_out.bias
Finetune layer in segmentor: decode_head.recovery_decoder.linear_k_out.bias
Finetune layer in segmentor: decode_head.lateral_proj.bias
Finetune layer in segmentor: decode_head.q_proj.bias
CLASSES: &id003 !!python/tuple
- aeroplane
- bicycle
- bird
- boat
- bottle
- bus
- car
- cat
- chair
- cow
- diningtable
- dog
- horse
- motorbike
- person
- pottedplant
- sheep
- sofa
- train
- tvmonitor
base: /mnt/fast/nobackup/users/ae01116/multi-modal-dissertation-uos
base_class:
- 0
- 1
- 2
- 3
- 4
- 5
- 6
- 7
- 8
- 9
- 10
- 11
- 12
- 13
- 14
base_scratch: /mnt/fast/nobackup/scratch4weeks/ae01116
both_class:
- 0
- 1
- 2
- 3
- 4
- 5
- 6
- 7
- 8
- 9
- 10
- 11
- 12
- 13
- 14
- 15
- 16
- 17
- 18
- 19
checkpoint_interval: 2000
crop_size: &id001 !!python/tuple
- 512
- 512
data_root: /mnt/fast/nobackup/scratch4weeks/ae01116/data/VOC2012
dataset:
  train:
    ann_dir: SegmentationClassAug
    batch_size: 4
    data_root: /mnt/fast/nobackup/scratch4weeks/ae01116/data/VOC2012
    drop_last: false
    img_dir: JPEGImages
    num_workers: 8
    pipeline:
    - type: LoadImageFromFile
    - reduce_zero_label: true
      type: LoadAnnotations
    - img_scale: &id002 !!python/tuple
      - 2048
      - 512
      ratio_range: &id004 !!python/tuple
      - 0.5
      - 2.0
      type: Resize
    - cat_max_ratio: 0.75
      crop_size: *id001
      type: RandomCrop
    - prob: 0.5
      type: RandomFlip
    - type: PhotoMetricDistortion
    - mean:
      - 123.675
      - 116.28
      - 103.53
      std:
      - 58.395
      - 57.12
      - 57.375
      to_rgb: true
      type: Normalize
    - pad_val: 0
      seg_pad_val: 255
      size: *id001
      type: Pad
    - type: DefaultFormatBundle
    - keys:
      - img
      - gt_semantic_seg
      type: Collect
    shuffle: true
    split: ImageSets/Segmentation/trainaug.txt
    type: ZeroPascalVOCDataset20
  val:
    ann_dir: SegmentationClass
    batch_size: 1
    data_root: /mnt/fast/nobackup/scratch4weeks/ae01116/data/VOC2012
    drop_last: false
    img_dir: JPEGImages
    num_workers: 1
    pipeline:
    - type: LoadImageFromFile
    - flip: false
      img_scale: *id002
      transforms:
      - keep_ratio: true
        min_size: 512
        type: Resize
      - type: RandomFlip
      - mean:
        - 123.675
        - 116.28
        - 103.53
        std:
        - 58.395
        - 57.12
        - 57.375
        to_rgb: true
        type: Normalize
      - keys:
        - img
        type: ImageToTensor
      - keys:
        - img
        type: Collect
      type: MultiScaleFlipAug
    shuffle: false
    split: ImageSets/Segmentation/val.txt
    type: ZeroPascalVOCDataset20
dataset_type: ZeroPascalVOCDataset20
eval_interval: 2000
img_norm_cfg:
  mean:
  - 123.675
  - 116.28
  - 103.53
  std:
  - 58.395
  - 57.12
  - 57.375
  to_rgb: true
img_size: 512
in_channels: 512
log_interval: 50
logger:
  type: RunLogger
max_iter: 40000
model:
  backbone:
    drop_path_rate: 0.1
    get_embeddings: true
    input_resolution: 512
    layers: 12
    num_tokens: 10
    out_indices:
    - 11
    output_dim: 512
    patch_size: 16
    prompt_dim: 768
    region_level_bridge_size: 16
    total_d_layer: 11
    type: CLIPVisionTransformerWithRLB
    width: 768
  base_class:
  - 0
  - 1
  - 2
  - 3
  - 4
  - 5
  - 6
  - 7
  - 8
  - 9
  - 10
  - 11
  - 12
  - 13
  - 14
  both_class:
  - 0
  - 1
  - 2
  - 3
  - 4
  - 5
  - 6
  - 7
  - 8
  - 9
  - 10
  - 11
  - 12
  - 13
  - 14
  - 15
  - 16
  - 17
  - 18
  - 19
  class_names: *id003
  decode_head:
    all_idx:
    - 0
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
    - 8
    - 9
    - 10
    - 11
    - 12
    - 13
    - 14
    - 15
    - 16
    - 17
    - 18
    - 19
    channels: 512
    embed_dims: 512
    img_size: 512
    in_channels: 512
    num_classes: 15
    num_heads: 8
    num_layers: 3
    seen_idx:
    - 0
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
    - 8
    - 9
    - 10
    - 11
    - 12
    - 13
    - 14
    type: ATMSingleHeadSeg
    use_proj: false
    use_stages: 1
  exclude_key: prompt
  ft_backbone: false
  load_text_embedding: /mnt/fast/nobackup/users/ae01116/multi-modal-dissertation-uos/configs/_base_/datasets/text_embedding/voc12_single.npy
  novel_class:
  - 15
  - 16
  - 17
  - 18
  - 19
  pretrained: /mnt/fast/nobackup/scratch4weeks/ae01116/weights/ViT-B-16-RC-CLIP.pkl
  pretrained_text: /mnt/fast/nobackup/scratch4weeks/ae01116/weights/ViT-B-16-RC-CLIP.pkl
  test_cfg:
    crop_size: !!python/tuple
    - 512
    - 512
    mode: slide
    stride: !!python/tuple
    - 426
    - 426
  text_encoder:
    context_length: 77
    embed_dim: 512
    pretrained: /mnt/fast/nobackup/scratch4weeks/ae01116/weights/ViT-B-16-RC-CLIP.pkl
    transformer_heads: 8
    transformer_layers: 12
    transformer_width: 512
    type: CLIPTextEncoder
  type: CLIPRC
name: clip_rc_zero_vit-b_512x512_40k_voc_10_16
novel_class:
- 15
- 16
- 17
- 18
- 19
optimizer:
  betas: !!python/tuple
  - 0.9
  - 0.999
  lr: 2.0e-05
  type: CustomAdamW
  weight_decay: 0.01
out_indices:
- 11
parameter_groups_generator:
  custom_keys:
    backbone:
      lr_mult: 10.0
    head:
      lr_mult: 10.0
    ln:
      decay_mult: 0.0
    norm:
      decay_mult: 0.0
    text_encoder:
      lr_mult: 0.0
  type: CustomPrameterGroupsGenerator
pretrained: /mnt/fast/nobackup/scratch4weeks/ae01116/weights/ViT-B-16-RC-CLIP.pkl
region_level_bridge_size: 16
scheduler:
  max_steps: 40000
  min_lr: 1.0e-06
  power: 0.9
  type: PolyLR
  warmup: linear
  warmup_iters: 1500
  warmup_ratio: 1.0e-06
test_pipeline:
- type: LoadImageFromFile
- flip: false
  img_scale: *id002
  transforms:
  - keep_ratio: true
    min_size: 512
    type: Resize
  - type: RandomFlip
  - mean:
    - 123.675
    - 116.28
    - 103.53
    std:
    - 58.395
    - 57.12
    - 57.375
    to_rgb: true
    type: Normalize
  - keys:
    - img
    type: ImageToTensor
  - keys:
    - img
    type: Collect
  type: MultiScaleFlipAug
train_pipeline:
- type: LoadImageFromFile
- reduce_zero_label: true
  type: LoadAnnotations
- img_scale: *id002
  ratio_range: *id004
  type: Resize
- cat_max_ratio: 0.75
  crop_size: *id001
  type: RandomCrop
- prob: 0.5
  type: RandomFlip
- type: PhotoMetricDistortion
- mean:
  - 123.675
  - 116.28
  - 103.53
  std:
  - 58.395
  - 57.12
  - 57.375
  to_rgb: true
  type: Normalize
- pad_val: 0
  seg_pad_val: 255
  size: *id001
  type: Pad
- type: DefaultFormatBundle
- keys:
  - img
  - gt_semantic_seg
  type: Collect
work_dir: work_dirs/clip_rc_zero_vit-b_512x512_40k_voc_10_16

Wed Aug  7 16:16:47 2024  model:CLIPRC(
    backbone: CLIPVisionTransformerWithRLB(
        conv1: Conv(3, 768, (16, 16), (16, 16), (0, 0), (1, 1), 1, None, None, Kw=None, fan=None, i=None, bound=None)
        ln_pre: LayerNorm((768,), 1e-05, elementwise_affine=True)
        transformer: Transformer(
            resblocks: Sequential(
                0: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(768, 768, float32[768,], None)
                    )
                    ln_1: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(768, 3072, float32[3072,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(3072, 768, float32[768,], None)
                    )
                    ln_2: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    drop_path: Identity(None, None)
                )
                1: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(768, 768, float32[768,], None)
                    )
                    ln_1: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(768, 3072, float32[3072,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(3072, 768, float32[768,], None)
                    )
                    ln_2: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    drop_path: DropPath(p=0.00909090880304575)
                )
                2: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(768, 768, float32[768,], None)
                    )
                    ln_1: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(768, 3072, float32[3072,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(3072, 768, float32[768,], None)
                    )
                    ln_2: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    drop_path: DropPath(p=0.0181818176060915)
                )
                3: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(768, 768, float32[768,], None)
                    )
                    ln_1: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(768, 3072, float32[3072,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(3072, 768, float32[768,], None)
                    )
                    ln_2: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    drop_path: DropPath(p=0.027272727340459824)
                )
                4: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(768, 768, float32[768,], None)
                    )
                    ln_1: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(768, 3072, float32[3072,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(3072, 768, float32[768,], None)
                    )
                    ln_2: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    drop_path: DropPath(p=0.036363635212183)
                )
                5: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(768, 768, float32[768,], None)
                    )
                    ln_1: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(768, 3072, float32[3072,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(3072, 768, float32[768,], None)
                    )
                    ln_2: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    drop_path: DropPath(p=0.045454543083906174)
                )
                6: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(768, 768, float32[768,], None)
                    )
                    ln_1: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(768, 3072, float32[3072,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(3072, 768, float32[768,], None)
                    )
                    ln_2: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    drop_path: DropPath(p=0.05454545468091965)
                )
                7: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(768, 768, float32[768,], None)
                    )
                    ln_1: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(768, 3072, float32[3072,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(3072, 768, float32[768,], None)
                    )
                    ln_2: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    drop_path: DropPath(p=0.06363636255264282)
                )
                8: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(768, 768, float32[768,], None)
                    )
                    ln_1: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(768, 3072, float32[3072,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(3072, 768, float32[768,], None)
                    )
                    ln_2: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    drop_path: DropPath(p=0.072727270424366)
                )
                9: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(768, 768, float32[768,], None)
                    )
                    ln_1: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(768, 3072, float32[3072,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(3072, 768, float32[768,], None)
                    )
                    ln_2: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    drop_path: DropPath(p=0.08181817829608917)
                )
                10: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(768, 768, float32[768,], None)
                    )
                    ln_1: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(768, 3072, float32[3072,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(3072, 768, float32[768,], None)
                    )
                    ln_2: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    drop_path: DropPath(p=0.09090908616781235)
                )
                11: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(768, 768, float32[768,], None)
                    )
                    ln_1: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(768, 3072, float32[3072,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(3072, 768, float32[768,], None)
                    )
                    ln_2: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    drop_path: DropPath(p=0.09999999403953552)
                )
            )
        )
        ln_post: LayerNorm((768,), 1e-05, elementwise_affine=True)
        prompt_proj: Linear(768, 768, float32[768,], None)
        prompt_norm: LayerNorm((768,), 1e-06, elementwise_affine=True)
        prompt_dropout: Dropout(0.1, is_train=False)
    )
    decode_head: ATMSingleHeadSeg(
        loss_decode: CrossEntropyLoss(avg_non_ignore=False)
        dropout: Dropout(0.1, is_train=False)
        input_proj_1: Identity(None, None)
        proj_norm_1: Identity(None, None)
        decoder_q: TPN_Decoder(
            layers: Sequential(
                0: TPN_DecoderLayer(
                    linear1: Linear(512, 2048, float32[2048,], None)
                    dropout: Dropout(0.1, is_train=False)
                    linear2: Linear(2048, 512, float32[512,], None)
                    norm2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    norm3: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    dropout1: Dropout(0.1, is_train=False)
                    dropout2: Dropout(0.1, is_train=False)
                    dropout3: Dropout(0.1, is_train=False)
                    multihead_attn: Attention(
                        q: Linear(512, 512, float32[512,], None)
                        k: Linear(512, 512, float32[512,], None)
                        v: Linear(512, 512, float32[512,], None)
                        attn_drop: Dropout(0.1, is_train=False)
                        proj: Linear(512, 512, float32[512,], None)
                        proj_drop: Dropout(0.0, is_train=False)
                    )
                )
                1: TPN_DecoderLayer(
                    linear1: Linear(512, 2048, float32[2048,], None)
                    dropout: Dropout(0.1, is_train=False)
                    linear2: Linear(2048, 512, float32[512,], None)
                    norm2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    norm3: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    dropout1: Dropout(0.1, is_train=False)
                    dropout2: Dropout(0.1, is_train=False)
                    dropout3: Dropout(0.1, is_train=False)
                    multihead_attn: Attention(
                        q: Linear(512, 512, float32[512,], None)
                        k: Linear(512, 512, float32[512,], None)
                        v: Linear(512, 512, float32[512,], None)
                        attn_drop: Dropout(0.1, is_train=False)
                        proj: Linear(512, 512, float32[512,], None)
                        proj_drop: Dropout(0.0, is_train=False)
                    )
                )
                2: TPN_DecoderLayer(
                    linear1: Linear(512, 2048, float32[2048,], None)
                    dropout: Dropout(0.1, is_train=False)
                    linear2: Linear(2048, 512, float32[512,], None)
                    norm2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    norm3: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    dropout1: Dropout(0.1, is_train=False)
                    dropout2: Dropout(0.1, is_train=False)
                    dropout3: Dropout(0.1, is_train=False)
                    multihead_attn: Attention(
                        q: Linear(512, 512, float32[512,], None)
                        k: Linear(512, 512, float32[512,], None)
                        v: Linear(512, 512, float32[512,], None)
                        attn_drop: Dropout(0.1, is_train=False)
                        proj: Linear(512, 512, float32[512,], None)
                        proj_drop: Dropout(0.0, is_train=False)
                    )
                )
            )
        )
        decoder_v: TPN_Decoder(
            layers: Sequential(
                0: TPN_DecoderLayer(
                    linear1: Linear(512, 2048, float32[2048,], None)
                    dropout: Dropout(0.1, is_train=False)
                    linear2: Linear(2048, 512, float32[512,], None)
                    norm2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    norm3: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    dropout1: Dropout(0.1, is_train=False)
                    dropout2: Dropout(0.1, is_train=False)
                    dropout3: Dropout(0.1, is_train=False)
                    multihead_attn: Attention(
                        q: Linear(512, 512, float32[512,], None)
                        k: Linear(512, 512, float32[512,], None)
                        v: Linear(512, 512, float32[512,], None)
                        attn_drop: Dropout(0.1, is_train=False)
                        proj: Linear(512, 512, float32[512,], None)
                        proj_drop: Dropout(0.0, is_train=False)
                    )
                )
                1: TPN_DecoderLayer(
                    linear1: Linear(512, 2048, float32[2048,], None)
                    dropout: Dropout(0.1, is_train=False)
                    linear2: Linear(2048, 512, float32[512,], None)
                    norm2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    norm3: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    dropout1: Dropout(0.1, is_train=False)
                    dropout2: Dropout(0.1, is_train=False)
                    dropout3: Dropout(0.1, is_train=False)
                    multihead_attn: Attention(
                        q: Linear(512, 512, float32[512,], None)
                        k: Linear(512, 512, float32[512,], None)
                        v: Linear(512, 512, float32[512,], None)
                        attn_drop: Dropout(0.1, is_train=False)
                        proj: Linear(512, 512, float32[512,], None)
                        proj_drop: Dropout(0.0, is_train=False)
                    )
                )
                2: TPN_DecoderLayer(
                    linear1: Linear(512, 2048, float32[2048,], None)
                    dropout: Dropout(0.1, is_train=False)
                    linear2: Linear(2048, 512, float32[512,], None)
                    norm2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    norm3: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    dropout1: Dropout(0.1, is_train=False)
                    dropout2: Dropout(0.1, is_train=False)
                    dropout3: Dropout(0.1, is_train=False)
                    multihead_attn: Attention(
                        q: Linear(512, 512, float32[512,], None)
                        k: Linear(512, 512, float32[512,], None)
                        v: Linear(512, 512, float32[512,], None)
                        attn_drop: Dropout(0.1, is_train=False)
                        proj: Linear(512, 512, float32[512,], None)
                        proj_drop: Dropout(0.0, is_train=False)
                    )
                )
            )
        )
        recovery_decoder: RecoveryDecoder(
            decouple_q: Sequential(
                0: TPN_DecoderLayer(
                    linear1: Linear(512, 2048, float32[2048,], None)
                    dropout: Dropout(0.1, is_train=False)
                    linear2: Linear(2048, 512, float32[512,], None)
                    norm2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    norm3: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    dropout1: Dropout(0.1, is_train=False)
                    dropout2: Dropout(0.1, is_train=False)
                    dropout3: Dropout(0.1, is_train=False)
                    multihead_attn: Attention(
                        q: Linear(512, 512, float32[512,], None)
                        k: Linear(512, 512, float32[512,], None)
                        v: Linear(512, 512, float32[512,], None)
                        attn_drop: Dropout(0.1, is_train=False)
                        proj: Linear(512, 512, float32[512,], None)
                        proj_drop: Dropout(0.0, is_train=False)
                    )
                )
            )
            decouple_v: Sequential(
                0: TPN_DecoderLayer(
                    linear1: Linear(512, 2048, float32[2048,], None)
                    dropout: Dropout(0.1, is_train=False)
                    linear2: Linear(2048, 512, float32[512,], None)
                    norm2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    norm3: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    dropout1: Dropout(0.1, is_train=False)
                    dropout2: Dropout(0.1, is_train=False)
                    dropout3: Dropout(0.1, is_train=False)
                    multihead_attn: Attention(
                        q: Linear(512, 512, float32[512,], None)
                        k: Linear(512, 512, float32[512,], None)
                        v: Linear(512, 512, float32[512,], None)
                        attn_drop: Dropout(0.1, is_train=False)
                        proj: Linear(512, 512, float32[512,], None)
                        proj_drop: Dropout(0.0, is_train=False)
                    )
                )
            )
            linear_q_in: Linear(512, 512, float32[512,], None)
            linear_k_in: Linear(512, 512, float32[512,], None)
            linear_q_out: Linear(512, 1024, float32[1024,], None)
            linear_k_out: Linear(512, 512, float32[512,], None)
        )
        lateral_proj: Linear(1536, 512, float32[512,], None)
        q_proj: Linear(1024, 512, float32[512,], None)
    )
    text_encoder: CLIPTextEncoder(
        transformer: Transformer(
            resblocks: Sequential(
                0: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(512, 512, float32[512,], None)
                    )
                    ln_1: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(512, 2048, float32[2048,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(2048, 512, float32[512,], None)
                    )
                    ln_2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    drop_path: Identity(None, None)
                )
                1: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(512, 512, float32[512,], None)
                    )
                    ln_1: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(512, 2048, float32[2048,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(2048, 512, float32[512,], None)
                    )
                    ln_2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    drop_path: Identity(None, None)
                )
                2: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(512, 512, float32[512,], None)
                    )
                    ln_1: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(512, 2048, float32[2048,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(2048, 512, float32[512,], None)
                    )
                    ln_2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    drop_path: Identity(None, None)
                )
                3: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(512, 512, float32[512,], None)
                    )
                    ln_1: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(512, 2048, float32[2048,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(2048, 512, float32[512,], None)
                    )
                    ln_2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    drop_path: Identity(None, None)
                )
                4: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(512, 512, float32[512,], None)
                    )
                    ln_1: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(512, 2048, float32[2048,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(2048, 512, float32[512,], None)
                    )
                    ln_2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    drop_path: Identity(None, None)
                )
                5: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(512, 512, float32[512,], None)
                    )
                    ln_1: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(512, 2048, float32[2048,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(2048, 512, float32[512,], None)
                    )
                    ln_2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    drop_path: Identity(None, None)
                )
                6: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(512, 512, float32[512,], None)
                    )
                    ln_1: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(512, 2048, float32[2048,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(2048, 512, float32[512,], None)
                    )
                    ln_2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    drop_path: Identity(None, None)
                )
                7: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(512, 512, float32[512,], None)
                    )
                    ln_1: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(512, 2048, float32[2048,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(2048, 512, float32[512,], None)
                    )
                    ln_2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    drop_path: Identity(None, None)
                )
                8: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(512, 512, float32[512,], None)
                    )
                    ln_1: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(512, 2048, float32[2048,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(2048, 512, float32[512,], None)
                    )
                    ln_2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    drop_path: Identity(None, None)
                )
                9: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(512, 512, float32[512,], None)
                    )
                    ln_1: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(512, 2048, float32[2048,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(2048, 512, float32[512,], None)
                    )
                    ln_2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    drop_path: Identity(None, None)
                )
                10: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(512, 512, float32[512,], None)
                    )
                    ln_1: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(512, 2048, float32[2048,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(2048, 512, float32[512,], None)
                    )
                    ln_2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    drop_path: Identity(None, None)
                )
                11: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(512, 512, float32[512,], None)
                    )
                    ln_1: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(512, 2048, float32[2048,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(2048, 512, float32[512,], None)
                    )
                    ln_2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    drop_path: Identity(None, None)
                )
            )
        )
        token_embedding: Embedding(None, None, None)
        ln_final: LayerNorm((512,), 1e-05, elementwise_affine=True)
    )
)
Loaded 10582 images
Loaded 1449 images
Wed Aug  7 16:16:47 2024 Start running
Beginning training script
