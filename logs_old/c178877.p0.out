[i 0802 07:28:17.738045 80 lock.py:85] Create lock file:/user/HS400/ae01116/.cache/jittor/jt1.3.8/g++7.5.0/py3.9.19/Linux-4.18.0-4xad/AMDEPYC753232-x73/jittor.lock
[i 0802 07:28:17.790300 80 compiler.py:956] Jittor(1.3.8.5) src: /mnt/fast/nobackup/scratch4weeks/ae01116/zegenv/lib/python3.9/site-packages/jittor
[i 0802 07:28:17.794336 80 compiler.py:957] g++ at /usr/bin/g++(7.5.0)
[i 0802 07:28:17.794447 80 compiler.py:958] cache_path: /user/HS400/ae01116/.cache/jittor/jt1.3.8/g++7.5.0/py3.9.19/Linux-4.18.0-4xad/AMDEPYC753232-x73/default
[i 0802 07:28:17.799675 80 __init__.py:411] Found nvcc(11.0.221) at /usr/local/cuda/bin/nvcc.
[i 0802 07:28:17.805214 80 __init__.py:411] Found addr2line(2.30) at /usr/bin/addr2line.
[i 0802 07:28:17.936395 80 compiler.py:1011] cuda key:cu11.0.221_sm_86
[i 0802 07:28:17.976758 80 compiler.py:34] Create cache dir: /user/HS400/ae01116/.cache/jittor/jt1.3.8/g++7.5.0/py3.9.19/Linux-4.18.0-4xad/AMDEPYC753232-x73/default/cu11.0.221_sm_86
[i 0802 07:28:17.979122 80 compiler.py:34] Create cache dir: /user/HS400/ae01116/.cache/jittor/jt1.3.8/g++7.5.0/py3.9.19/Linux-4.18.0-4xad/AMDEPYC753232-x73/default/cu11.0.221_sm_86/jit
[i 0802 07:28:17.980496 80 compiler.py:34] Create cache dir: /user/HS400/ae01116/.cache/jittor/jt1.3.8/g++7.5.0/py3.9.19/Linux-4.18.0-4xad/AMDEPYC753232-x73/default/cu11.0.221_sm_86/obj_files
[i 0802 07:28:17.981770 80 compiler.py:34] Create cache dir: /user/HS400/ae01116/.cache/jittor/jt1.3.8/g++7.5.0/py3.9.19/Linux-4.18.0-4xad/AMDEPYC753232-x73/default/cu11.0.221_sm_86/gen
[i 0802 07:28:17.983092 80 compiler.py:34] Create cache dir: /user/HS400/ae01116/.cache/jittor/jt1.3.8/g++7.5.0/py3.9.19/Linux-4.18.0-4xad/AMDEPYC753232-x73/default/cu11.0.221_sm_86/tmp
[i 0802 07:28:17.984441 80 compiler.py:34] Create cache dir: /user/HS400/ae01116/.cache/jittor/jt1.3.8/g++7.5.0/py3.9.19/Linux-4.18.0-4xad/AMDEPYC753232-x73/default/cu11.0.221_sm_86/checkpoints
Compiling jittor_core(25/151) used: 2.027s eta: 10.217sCompiling jittor_core(26/151) used: 2.053s eta: 9.869sCompiling jittor_core(27/151) used: 2.226s eta: 10.224sCompiling jittor_core(28/151) used: 2.231s eta: 9.799sCompiling jittor_core(29/151) used: 2.266s eta: 9.533sCompiling jittor_core(30/151) used: 2.475s eta: 9.981sCompiling jittor_core(31/151) used: 2.523s eta: 9.765sCompiling jittor_core(32/151) used: 2.607s eta: 9.694sCompiling jittor_core(33/151) used: 2.608s eta: 9.325sCompiling jittor_core(34/151) used: 2.787s eta: 9.590sCompiling jittor_core(35/151) used: 2.794s eta: 9.260sCompiling jittor_core(36/151) used: 2.874s eta: 9.180sCompiling jittor_core(37/151) used: 3.021s eta: 9.307sCompiling jittor_core(38/151) used: 3.089s eta: 9.185sCompiling jittor_core(39/151) used: 3.106s eta: 8.919sCompiling jittor_core(40/151) used: 3.190s eta: 8.853sCompiling jittor_core(41/151) used: 3.199s eta: 8.583sCompiling jittor_core(42/151) used: 3.272s eta: 8.493sCompiling jittor_core(43/151) used: 3.393s eta: 8.522sCompiling jittor_core(44/151) used: 3.411s eta: 8.295sCompiling jittor_core(45/151) used: 3.467s eta: 8.166sCompiling jittor_core(46/151) used: 3.690s eta: 8.424sCompiling jittor_core(47/151) used: 3.720s eta: 8.232sCompiling jittor_core(48/151) used: 3.741s eta: 8.028sCompiling jittor_core(49/151) used: 3.821s eta: 7.955sCompiling jittor_core(50/151) used: 3.979s eta: 8.038sCompiling jittor_core(51/151) used: 4.037s eta: 7.916sCompiling jittor_core(52/151) used: 4.045s eta: 7.701sCompiling jittor_core(53/151) used: 4.053s eta: 7.494sCompiling jittor_core(54/151) used: 4.102s eta: 7.369sCompiling jittor_core(55/151) used: 4.216s eta: 7.358sCompiling jittor_core(56/151) used: 4.328s eta: 7.343sCompiling jittor_core(57/151) used: 4.353s eta: 7.178sCompiling jittor_core(58/151) used: 4.491s eta: 7.201sCompiling jittor_core(59/151) used: 4.502s eta: 7.021sCompiling jittor_core(60/151) used: 4.576s eta: 6.940sCompiling jittor_core(61/151) used: 4.628s eta: 6.828sCompiling jittor_core(62/151) used: 4.650s eta: 6.675sCompiling jittor_core(63/151) used: 4.771s eta: 6.664sCompiling jittor_core(64/151) used: 4.940s eta: 6.715sCompiling jittor_core(65/151) used: 4.961s eta: 6.564sCompiling jittor_core(66/151) used: 4.981s eta: 6.415sCompiling jittor_core(67/151) used: 4.990s eta: 6.257sCompiling jittor_core(68/151) used: 5.006s eta: 6.110sCompiling jittor_core(69/151) used: 5.079s eta: 6.036sCompiling jittor_core(70/151) used: 5.186s eta: 6.001sCompiling jittor_core(71/151) used: 5.199s eta: 5.858sCompiling jittor_core(72/151) used: 5.335s eta: 5.853sCompiling jittor_core(73/151) used: 5.342s eta: 5.708sCompiling jittor_core(74/151) used: 5.363s eta: 5.581sCompiling jittor_core(75/151) used: 5.386s eta: 5.458sCompiling jittor_core(76/151) used: 5.434s eta: 5.363sCompiling jittor_core(77/151) used: 5.482s eta: 5.268sCompiling jittor_core(78/151) used: 5.492s eta: 5.140sCompiling jittor_core(79/151) used: 5.578s eta: 5.084sCompiling jittor_core(80/151) used: 5.592s eta: 4.963sCompiling jittor_core(81/151) used: 5.645s eta: 4.878sCompiling jittor_core(82/151) used: 5.648s eta: 4.753sCompiling jittor_core(83/151) used: 5.727s eta: 4.692sCompiling jittor_core(84/151) used: 5.949s eta: 4.745sCompiling jittor_core(85/151) used: 6.100s eta: 4.737sCompiling jittor_core(86/151) used: 6.106s eta: 4.615sCompiling jittor_core(87/151) used: 6.140s eta: 4.517sCompiling jittor_core(88/151) used: 6.189s eta: 4.431sCompiling jittor_core(89/151) used: 6.281s eta: 4.376sCompiling jittor_core(90/151) used: 6.375s eta: 4.321sCompiling jittor_core(91/151) used: 6.379s eta: 4.206sCompiling jittor_core(92/151) used: 6.578s eta: 4.218sCompiling jittor_core(93/151) used: 6.603s eta: 4.118sCompiling jittor_core(94/151) used: 6.605s eta: 4.005sCompiling jittor_core(95/151) used: 6.622s eta: 3.903sCompiling jittor_core(96/151) used: 6.703s eta: 3.840sCompiling jittor_core(97/151) used: 6.741s eta: 3.753sCompiling jittor_core(98/151) used: 6.757s eta: 3.655sCompiling jittor_core(99/151) used: 6.801s eta: 3.572sCompiling jittor_core(100/151) used: 6.848s eta: 3.493sCompiling jittor_core(101/151) used: 6.884s eta: 3.408sCompiling jittor_core(102/151) used: 6.998s eta: 3.362sCompiling jittor_core(103/151) used: 7.254s eta: 3.380sCompiling jittor_core(104/151) used: 7.305s eta: 3.301sCompiling jittor_core(105/151) used: 7.344s eta: 3.217sCompiling jittor_core(106/151) used: 7.387s eta: 3.136sCompiling jittor_core(107/151) used: 7.442s eta: 3.060sCompiling jittor_core(108/151) used: 7.450s eta: 2.966sCompiling jittor_core(109/151) used: 7.554s eta: 2.911sCompiling jittor_core(110/151) used: 7.632s eta: 2.845sCompiling jittor_core(111/151) used: 7.756s eta: 2.795sCompiling jittor_core(112/151) used: 7.757s eta: 2.701sCompiling jittor_core(113/151) used: 7.819s eta: 2.629sCompiling jittor_core(114/151) used: 7.880s eta: 2.557sCompiling jittor_core(115/151) used: 7.931s eta: 2.483sCompiling jittor_core(116/151) used: 7.992s eta: 2.411sCompiling jittor_core(117/151) used: 8.005s eta: 2.326sCompiling jittor_core(118/151) used: 8.181s eta: 2.288sCompiling jittor_core(119/151) used: 8.183s eta: 2.200sCompiling jittor_core(120/151) used: 8.340s eta: 2.154sCompiling jittor_core(121/151) used: 8.435s eta: 2.091sCompiling jittor_core(122/151) used: 8.525s eta: 2.026sCompiling jittor_core(123/151) used: 8.545s eta: 1.945sCompiling jittor_core(124/151) used: 8.564s eta: 1.865sCompiling jittor_core(125/151) used: 8.599s eta: 1.789sCompiling jittor_core(126/151) used: 8.611s eta: 1.709sCompiling jittor_core(127/151) used: 8.674s eta: 1.639sCompiling jittor_core(128/151) used: 8.895s eta: 1.598sCompiling jittor_core(129/151) used: 8.913s eta: 1.520sCompiling jittor_core(130/151) used: 8.945s eta: 1.445sCompiling jittor_core(131/151) used: 8.988s eta: 1.372sCompiling jittor_core(132/151) used: 8.989s eta: 1.294sCompiling jittor_core(133/151) used: 9.023s eta: 1.221sCompiling jittor_core(134/151) used: 9.047s eta: 1.148sCompiling jittor_core(135/151) used: 9.078s eta: 1.076sCompiling jittor_core(136/151) used: 9.198s eta: 1.014sCompiling jittor_core(137/151) used: 9.244s eta: 0.945sCompiling jittor_core(138/151) used: 9.276s eta: 0.874sCompiling jittor_core(139/151) used: 9.303s eta: 0.803sCompiling jittor_core(140/151) used: 9.348s eta: 0.734sCompiling jittor_core(141/151) used: 9.451s eta: 0.670sCompiling jittor_core(142/151) used: 9.471s eta: 0.600sCompiling jittor_core(143/151) used: 9.569s eta: 0.535sCompiling jittor_core(144/151) used: 9.584s eta: 0.466sCompiling jittor_core(145/151) used: 9.649s eta: 0.399sCompiling jittor_core(146/151) used: 9.703s eta: 0.332sCompiling jittor_core(147/151) used: 9.784s eta: 0.266sCompiling jittor_core(148/151) used: 10.556s eta: 0.214sCompiling jittor_core(149/151) used: 11.038s eta: 0.148sCompiling jittor_core(150/151) used: 11.366s eta: 0.076sCompiling jittor_core(151/151) used: 17.470s eta: 0.000s
Compiling libcutt(8/9) used: 3.802s eta: 0.475sCompiling libcutt(9/9) used: 7.852s eta: 0.000s
Compiling gen_ops_mkl_conv_mkl_conv_backward_w_mkl_test_mkl____hash4cc03b(7/7) used: 2.133s eta: 0.000s
Compiling gen_ops_cudnn_rnn_cudnn_conv_backward_w_cudnn_conv___hash8b3aa2(16/16) used: 3.330s eta: 0.000s
Loading config from:  /mnt/fast/nobackup/users/ae01116/multi-modal-dissertation-uos/configs/voc12/clip_rc_zero_vit-b_512x512_40k_voc_10_16.py
Resize the pos_embed shape from (197, 768) to [1025,768,]
Making visible mask for zero-shot setting: [  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  -1  -1  -1
  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1
  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1
  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1
  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1
  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1
  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1
  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1
  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1
  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1
  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1
  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1
  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1
  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1  -1
  -1  -1  -1 255]
--------------------------------------
Finetune layer in segmentor: backbone.prompt_embeddings
Finetune layer in segmentor: backbone.deep_prompt_embeddings
Finetune layer in segmentor: backbone.prompt_proj.weight
Finetune layer in segmentor: backbone.prompt_proj.bias
Finetune layer in segmentor: backbone.prompt_norm.weight
Finetune layer in segmentor: backbone.prompt_norm.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.0.linear1.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.0.linear2.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.0.norm2.weight
Finetune layer in segmentor: decode_head.decoder_q.layers.0.norm2.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.0.norm3.weight
Finetune layer in segmentor: decode_head.decoder_q.layers.0.norm3.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.0.multihead_attn.q.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.0.multihead_attn.k.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.0.multihead_attn.v.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.0.multihead_attn.proj.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.1.linear1.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.1.linear2.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.1.norm2.weight
Finetune layer in segmentor: decode_head.decoder_q.layers.1.norm2.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.1.norm3.weight
Finetune layer in segmentor: decode_head.decoder_q.layers.1.norm3.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.1.multihead_attn.q.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.1.multihead_attn.k.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.1.multihead_attn.v.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.1.multihead_attn.proj.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.2.linear1.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.2.linear2.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.2.norm2.weight
Finetune layer in segmentor: decode_head.decoder_q.layers.2.norm2.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.2.norm3.weight
Finetune layer in segmentor: decode_head.decoder_q.layers.2.norm3.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.2.multihead_attn.q.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.2.multihead_attn.k.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.2.multihead_attn.v.bias
Finetune layer in segmentor: decode_head.decoder_q.layers.2.multihead_attn.proj.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.0.linear1.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.0.linear2.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.0.norm2.weight
Finetune layer in segmentor: decode_head.decoder_v.layers.0.norm2.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.0.norm3.weight
Finetune layer in segmentor: decode_head.decoder_v.layers.0.norm3.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.0.multihead_attn.q.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.0.multihead_attn.k.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.0.multihead_attn.v.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.0.multihead_attn.proj.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.1.linear1.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.1.linear2.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.1.norm2.weight
Finetune layer in segmentor: decode_head.decoder_v.layers.1.norm2.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.1.norm3.weight
Finetune layer in segmentor: decode_head.decoder_v.layers.1.norm3.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.1.multihead_attn.q.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.1.multihead_attn.k.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.1.multihead_attn.v.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.1.multihead_attn.proj.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.2.linear1.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.2.linear2.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.2.norm2.weight
Finetune layer in segmentor: decode_head.decoder_v.layers.2.norm2.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.2.norm3.weight
Finetune layer in segmentor: decode_head.decoder_v.layers.2.norm3.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.2.multihead_attn.q.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.2.multihead_attn.k.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.2.multihead_attn.v.bias
Finetune layer in segmentor: decode_head.decoder_v.layers.2.multihead_attn.proj.bias
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_q.0.linear1.bias
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_q.0.linear2.bias
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_q.0.norm2.weight
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_q.0.norm2.bias
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_q.0.norm3.weight
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_q.0.norm3.bias
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_q.0.multihead_attn.q.bias
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_q.0.multihead_attn.k.bias
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_q.0.multihead_attn.v.bias
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_q.0.multihead_attn.proj.bias
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_v.0.linear1.bias
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_v.0.linear2.bias
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_v.0.norm2.weight
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_v.0.norm2.bias
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_v.0.norm3.weight
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_v.0.norm3.bias
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_v.0.multihead_attn.q.bias
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_v.0.multihead_attn.k.bias
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_v.0.multihead_attn.v.bias
Finetune layer in segmentor: decode_head.recovery_decoder.decouple_v.0.multihead_attn.proj.bias
Finetune layer in segmentor: decode_head.recovery_decoder.linear_q_in.bias
Finetune layer in segmentor: decode_head.recovery_decoder.linear_k_in.bias
Finetune layer in segmentor: decode_head.recovery_decoder.linear_q_out.bias
Finetune layer in segmentor: decode_head.recovery_decoder.linear_k_out.bias
Finetune layer in segmentor: decode_head.lateral_proj.bias
Finetune layer in segmentor: decode_head.q_proj.bias
CLASSES: &id003 !!python/tuple
- aeroplane
- bicycle
- bird
- boat
- bottle
- bus
- car
- cat
- chair
- cow
- diningtable
- dog
- horse
- motorbike
- person
- pottedplant
- sheep
- sofa
- train
- tvmonitor
base: /mnt/fast/nobackup/users/ae01116/multi-modal-dissertation-uos
base_class:
- 0
- 1
- 2
- 3
- 4
- 5
- 6
- 7
- 8
- 9
- 10
- 11
- 12
- 13
- 14
base_scratch: /mnt/fast/nobackup/scratch4weeks/ae01116
both_class:
- 0
- 1
- 2
- 3
- 4
- 5
- 6
- 7
- 8
- 9
- 10
- 11
- 12
- 13
- 14
- 15
- 16
- 17
- 18
- 19
checkpoint_interval: 2000
crop_size: &id001 !!python/tuple
- 512
- 512
data_root: /mnt/fast/nobackup/scratch4weeks/ae01116/data/VOC2012
dataset:
  train:
    ann_dir: SegmentationClassAug
    batch_size: 4
    data_root: /mnt/fast/nobackup/scratch4weeks/ae01116/data/VOC2012
    drop_last: false
    img_dir: JPEGImages
    num_workers: 8
    pipeline:
    - type: LoadImageFromFile
    - reduce_zero_label: true
      type: LoadAnnotations
    - img_scale: &id002 !!python/tuple
      - 2048
      - 512
      ratio_range: &id004 !!python/tuple
      - 0.5
      - 2.0
      type: Resize
    - cat_max_ratio: 0.75
      crop_size: *id001
      type: RandomCrop
    - prob: 0.5
      type: RandomFlip
    - type: PhotoMetricDistortion
    - mean:
      - 123.675
      - 116.28
      - 103.53
      std:
      - 58.395
      - 57.12
      - 57.375
      to_rgb: true
      type: Normalize
    - pad_val: 0
      seg_pad_val: 255
      size: *id001
      type: Pad
    - type: DefaultFormatBundle
    - keys:
      - img
      - gt_semantic_seg
      type: Collect
    shuffle: true
    split: ImageSets/Segmentation/trainaug.txt
    type: ZeroPascalVOCDataset20
  val:
    ann_dir: SegmentationClass
    batch_size: 1
    data_root: /mnt/fast/nobackup/scratch4weeks/ae01116/data/VOC2012
    drop_last: false
    img_dir: JPEGImages
    num_workers: 1
    pipeline:
    - type: LoadImageFromFile
    - flip: false
      img_scale: *id002
      transforms:
      - keep_ratio: true
        min_size: 512
        type: Resize
      - type: RandomFlip
      - mean:
        - 123.675
        - 116.28
        - 103.53
        std:
        - 58.395
        - 57.12
        - 57.375
        to_rgb: true
        type: Normalize
      - keys:
        - img
        type: ImageToTensor
      - keys:
        - img
        type: Collect
      type: MultiScaleFlipAug
    shuffle: false
    split: ImageSets/Segmentation/val.txt
    type: ZeroPascalVOCDataset20
dataset_type: ZeroPascalVOCDataset20
eval_interval: 2000
img_norm_cfg:
  mean:
  - 123.675
  - 116.28
  - 103.53
  std:
  - 58.395
  - 57.12
  - 57.375
  to_rgb: true
img_size: 512
in_channels: 512
log_interval: 50
logger:
  type: RunLogger
max_iter: 40000
model:
  backbone:
    drop_path_rate: 0.1
    get_embeddings: true
    input_resolution: 512
    layers: 12
    num_tokens: 10
    out_indices:
    - 11
    output_dim: 512
    patch_size: 16
    prompt_dim: 768
    region_level_bridge_size: 16
    total_d_layer: 11
    type: CLIPVisionTransformerWithRLB
    width: 768
  base_class:
  - 0
  - 1
  - 2
  - 3
  - 4
  - 5
  - 6
  - 7
  - 8
  - 9
  - 10
  - 11
  - 12
  - 13
  - 14
  both_class:
  - 0
  - 1
  - 2
  - 3
  - 4
  - 5
  - 6
  - 7
  - 8
  - 9
  - 10
  - 11
  - 12
  - 13
  - 14
  - 15
  - 16
  - 17
  - 18
  - 19
  class_names: *id003
  decode_head:
    all_idx:
    - 0
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
    - 8
    - 9
    - 10
    - 11
    - 12
    - 13
    - 14
    - 15
    - 16
    - 17
    - 18
    - 19
    channels: 512
    embed_dims: 512
    img_size: 512
    in_channels: 512
    num_classes: 15
    num_heads: 8
    num_layers: 3
    seen_idx:
    - 0
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
    - 8
    - 9
    - 10
    - 11
    - 12
    - 13
    - 14
    type: ATMSingleHeadSeg
    use_proj: false
    use_stages: 1
  exclude_key: prompt
  ft_backbone: false
  load_text_embedding: /mnt/fast/nobackup/users/ae01116/multi-modal-dissertation-uos/configs/_base_/datasets/text_embedding/voc12_single.npy
  novel_class:
  - 15
  - 16
  - 17
  - 18
  - 19
  pretrained: /mnt/fast/nobackup/scratch4weeks/ae01116/weights/ViT-B-16-RC-CLIP.pkl
  pretrained_text: /mnt/fast/nobackup/scratch4weeks/ae01116/weights/ViT-B-16-RC-CLIP.pkl
  test_cfg:
    crop_size: !!python/tuple
    - 512
    - 512
    mode: slide
    stride: !!python/tuple
    - 426
    - 426
  text_encoder:
    context_length: 77
    embed_dim: 512
    pretrained: /mnt/fast/nobackup/scratch4weeks/ae01116/weights/ViT-B-16-RC-CLIP.pkl
    transformer_heads: 8
    transformer_layers: 12
    transformer_width: 512
    type: CLIPTextEncoder
  type: CLIPRC
name: clip_rc_zero_vit-b_512x512_40k_voc_10_16
novel_class:
- 15
- 16
- 17
- 18
- 19
optimizer:
  betas: !!python/tuple
  - 0.9
  - 0.999
  lr: 2.0e-05
  type: CustomAdamW
  weight_decay: 0.01
out_indices:
- 11
parameter_groups_generator:
  custom_keys:
    backbone:
      lr_mult: 10.0
    head:
      lr_mult: 10.0
    ln:
      decay_mult: 0.0
    norm:
      decay_mult: 0.0
    text_encoder:
      lr_mult: 0.0
  type: CustomPrameterGroupsGenerator
pretrained: /mnt/fast/nobackup/scratch4weeks/ae01116/weights/ViT-B-16-RC-CLIP.pkl
region_level_bridge_size: 16
scheduler:
  max_steps: 40000
  min_lr: 1.0e-06
  power: 0.9
  type: PolyLR
  warmup: linear
  warmup_iters: 1500
  warmup_ratio: 1.0e-06
test_pipeline:
- type: LoadImageFromFile
- flip: false
  img_scale: *id002
  transforms:
  - keep_ratio: true
    min_size: 512
    type: Resize
  - type: RandomFlip
  - mean:
    - 123.675
    - 116.28
    - 103.53
    std:
    - 58.395
    - 57.12
    - 57.375
    to_rgb: true
    type: Normalize
  - keys:
    - img
    type: ImageToTensor
  - keys:
    - img
    type: Collect
  type: MultiScaleFlipAug
train_pipeline:
- type: LoadImageFromFile
- reduce_zero_label: true
  type: LoadAnnotations
- img_scale: *id002
  ratio_range: *id004
  type: Resize
- cat_max_ratio: 0.75
  crop_size: *id001
  type: RandomCrop
- prob: 0.5
  type: RandomFlip
- type: PhotoMetricDistortion
- mean:
  - 123.675
  - 116.28
  - 103.53
  std:
  - 58.395
  - 57.12
  - 57.375
  to_rgb: true
  type: Normalize
- pad_val: 0
  seg_pad_val: 255
  size: *id001
  type: Pad
- type: DefaultFormatBundle
- keys:
  - img
  - gt_semantic_seg
  type: Collect
work_dir: work_dirs/clip_rc_zero_vit-b_512x512_40k_voc_10_16

Fri Aug  2 07:29:58 2024  model:CLIPRC(
    backbone: CLIPVisionTransformerWithRLB(
        conv1: Conv(3, 768, (16, 16), (16, 16), (0, 0), (1, 1), 1, None, None, Kw=None, fan=None, i=None, bound=None)
        ln_pre: LayerNorm((768,), 1e-05, elementwise_affine=True)
        transformer: Transformer(
            resblocks: Sequential(
                0: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(768, 768, float32[768,], None)
                    )
                    ln_1: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(768, 3072, float32[3072,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(3072, 768, float32[768,], None)
                    )
                    ln_2: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    drop_path: Identity(None, None)
                )
                1: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(768, 768, float32[768,], None)
                    )
                    ln_1: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(768, 3072, float32[3072,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(3072, 768, float32[768,], None)
                    )
                    ln_2: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    drop_path: DropPath(p=0.00909090880304575)
                )
                2: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(768, 768, float32[768,], None)
                    )
                    ln_1: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(768, 3072, float32[3072,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(3072, 768, float32[768,], None)
                    )
                    ln_2: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    drop_path: DropPath(p=0.0181818176060915)
                )
                3: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(768, 768, float32[768,], None)
                    )
                    ln_1: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(768, 3072, float32[3072,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(3072, 768, float32[768,], None)
                    )
                    ln_2: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    drop_path: DropPath(p=0.027272727340459824)
                )
                4: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(768, 768, float32[768,], None)
                    )
                    ln_1: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(768, 3072, float32[3072,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(3072, 768, float32[768,], None)
                    )
                    ln_2: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    drop_path: DropPath(p=0.036363635212183)
                )
                5: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(768, 768, float32[768,], None)
                    )
                    ln_1: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(768, 3072, float32[3072,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(3072, 768, float32[768,], None)
                    )
                    ln_2: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    drop_path: DropPath(p=0.045454543083906174)
                )
                6: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(768, 768, float32[768,], None)
                    )
                    ln_1: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(768, 3072, float32[3072,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(3072, 768, float32[768,], None)
                    )
                    ln_2: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    drop_path: DropPath(p=0.05454545468091965)
                )
                7: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(768, 768, float32[768,], None)
                    )
                    ln_1: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(768, 3072, float32[3072,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(3072, 768, float32[768,], None)
                    )
                    ln_2: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    drop_path: DropPath(p=0.06363636255264282)
                )
                8: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(768, 768, float32[768,], None)
                    )
                    ln_1: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(768, 3072, float32[3072,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(3072, 768, float32[768,], None)
                    )
                    ln_2: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    drop_path: DropPath(p=0.072727270424366)
                )
                9: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(768, 768, float32[768,], None)
                    )
                    ln_1: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(768, 3072, float32[3072,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(3072, 768, float32[768,], None)
                    )
                    ln_2: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    drop_path: DropPath(p=0.08181817829608917)
                )
                10: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(768, 768, float32[768,], None)
                    )
                    ln_1: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(768, 3072, float32[3072,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(3072, 768, float32[768,], None)
                    )
                    ln_2: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    drop_path: DropPath(p=0.09090908616781235)
                )
                11: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(768, 768, float32[768,], None)
                    )
                    ln_1: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(768, 3072, float32[3072,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(3072, 768, float32[768,], None)
                    )
                    ln_2: LayerNorm((768,), 1e-05, elementwise_affine=True)
                    drop_path: DropPath(p=0.09999999403953552)
                )
            )
        )
        ln_post: LayerNorm((768,), 1e-05, elementwise_affine=True)
        prompt_proj: Linear(768, 768, float32[768,], None)
        prompt_norm: LayerNorm((768,), 1e-06, elementwise_affine=True)
        prompt_dropout: Dropout(0.1, is_train=False)
    )
    decode_head: ATMSingleHeadSeg(
        loss_decode: CrossEntropyLoss(avg_non_ignore=False)
        dropout: Dropout(0.1, is_train=False)
        input_proj_1: Identity(None, None)
        proj_norm_1: Identity(None, None)
        decoder_q: TPN_Decoder(
            layers: Sequential(
                0: TPN_DecoderLayer(
                    linear1: Linear(512, 2048, float32[2048,], None)
                    dropout: Dropout(0.1, is_train=False)
                    linear2: Linear(2048, 512, float32[512,], None)
                    norm2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    norm3: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    dropout1: Dropout(0.1, is_train=False)
                    dropout2: Dropout(0.1, is_train=False)
                    dropout3: Dropout(0.1, is_train=False)
                    multihead_attn: Attention(
                        q: Linear(512, 512, float32[512,], None)
                        k: Linear(512, 512, float32[512,], None)
                        v: Linear(512, 512, float32[512,], None)
                        attn_drop: Dropout(0.1, is_train=False)
                        proj: Linear(512, 512, float32[512,], None)
                        proj_drop: Dropout(0.0, is_train=False)
                    )
                )
                1: TPN_DecoderLayer(
                    linear1: Linear(512, 2048, float32[2048,], None)
                    dropout: Dropout(0.1, is_train=False)
                    linear2: Linear(2048, 512, float32[512,], None)
                    norm2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    norm3: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    dropout1: Dropout(0.1, is_train=False)
                    dropout2: Dropout(0.1, is_train=False)
                    dropout3: Dropout(0.1, is_train=False)
                    multihead_attn: Attention(
                        q: Linear(512, 512, float32[512,], None)
                        k: Linear(512, 512, float32[512,], None)
                        v: Linear(512, 512, float32[512,], None)
                        attn_drop: Dropout(0.1, is_train=False)
                        proj: Linear(512, 512, float32[512,], None)
                        proj_drop: Dropout(0.0, is_train=False)
                    )
                )
                2: TPN_DecoderLayer(
                    linear1: Linear(512, 2048, float32[2048,], None)
                    dropout: Dropout(0.1, is_train=False)
                    linear2: Linear(2048, 512, float32[512,], None)
                    norm2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    norm3: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    dropout1: Dropout(0.1, is_train=False)
                    dropout2: Dropout(0.1, is_train=False)
                    dropout3: Dropout(0.1, is_train=False)
                    multihead_attn: Attention(
                        q: Linear(512, 512, float32[512,], None)
                        k: Linear(512, 512, float32[512,], None)
                        v: Linear(512, 512, float32[512,], None)
                        attn_drop: Dropout(0.1, is_train=False)
                        proj: Linear(512, 512, float32[512,], None)
                        proj_drop: Dropout(0.0, is_train=False)
                    )
                )
            )
        )
        decoder_v: TPN_Decoder(
            layers: Sequential(
                0: TPN_DecoderLayer(
                    linear1: Linear(512, 2048, float32[2048,], None)
                    dropout: Dropout(0.1, is_train=False)
                    linear2: Linear(2048, 512, float32[512,], None)
                    norm2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    norm3: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    dropout1: Dropout(0.1, is_train=False)
                    dropout2: Dropout(0.1, is_train=False)
                    dropout3: Dropout(0.1, is_train=False)
                    multihead_attn: Attention(
                        q: Linear(512, 512, float32[512,], None)
                        k: Linear(512, 512, float32[512,], None)
                        v: Linear(512, 512, float32[512,], None)
                        attn_drop: Dropout(0.1, is_train=False)
                        proj: Linear(512, 512, float32[512,], None)
                        proj_drop: Dropout(0.0, is_train=False)
                    )
                )
                1: TPN_DecoderLayer(
                    linear1: Linear(512, 2048, float32[2048,], None)
                    dropout: Dropout(0.1, is_train=False)
                    linear2: Linear(2048, 512, float32[512,], None)
                    norm2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    norm3: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    dropout1: Dropout(0.1, is_train=False)
                    dropout2: Dropout(0.1, is_train=False)
                    dropout3: Dropout(0.1, is_train=False)
                    multihead_attn: Attention(
                        q: Linear(512, 512, float32[512,], None)
                        k: Linear(512, 512, float32[512,], None)
                        v: Linear(512, 512, float32[512,], None)
                        attn_drop: Dropout(0.1, is_train=False)
                        proj: Linear(512, 512, float32[512,], None)
                        proj_drop: Dropout(0.0, is_train=False)
                    )
                )
                2: TPN_DecoderLayer(
                    linear1: Linear(512, 2048, float32[2048,], None)
                    dropout: Dropout(0.1, is_train=False)
                    linear2: Linear(2048, 512, float32[512,], None)
                    norm2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    norm3: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    dropout1: Dropout(0.1, is_train=False)
                    dropout2: Dropout(0.1, is_train=False)
                    dropout3: Dropout(0.1, is_train=False)
                    multihead_attn: Attention(
                        q: Linear(512, 512, float32[512,], None)
                        k: Linear(512, 512, float32[512,], None)
                        v: Linear(512, 512, float32[512,], None)
                        attn_drop: Dropout(0.1, is_train=False)
                        proj: Linear(512, 512, float32[512,], None)
                        proj_drop: Dropout(0.0, is_train=False)
                    )
                )
            )
        )
        recovery_decoder: RecoveryDecoder(
            decouple_q: Sequential(
                0: TPN_DecoderLayer(
                    linear1: Linear(512, 2048, float32[2048,], None)
                    dropout: Dropout(0.1, is_train=False)
                    linear2: Linear(2048, 512, float32[512,], None)
                    norm2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    norm3: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    dropout1: Dropout(0.1, is_train=False)
                    dropout2: Dropout(0.1, is_train=False)
                    dropout3: Dropout(0.1, is_train=False)
                    multihead_attn: Attention(
                        q: Linear(512, 512, float32[512,], None)
                        k: Linear(512, 512, float32[512,], None)
                        v: Linear(512, 512, float32[512,], None)
                        attn_drop: Dropout(0.1, is_train=False)
                        proj: Linear(512, 512, float32[512,], None)
                        proj_drop: Dropout(0.0, is_train=False)
                    )
                )
            )
            decouple_v: Sequential(
                0: TPN_DecoderLayer(
                    linear1: Linear(512, 2048, float32[2048,], None)
                    dropout: Dropout(0.1, is_train=False)
                    linear2: Linear(2048, 512, float32[512,], None)
                    norm2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    norm3: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    dropout1: Dropout(0.1, is_train=False)
                    dropout2: Dropout(0.1, is_train=False)
                    dropout3: Dropout(0.1, is_train=False)
                    multihead_attn: Attention(
                        q: Linear(512, 512, float32[512,], None)
                        k: Linear(512, 512, float32[512,], None)
                        v: Linear(512, 512, float32[512,], None)
                        attn_drop: Dropout(0.1, is_train=False)
                        proj: Linear(512, 512, float32[512,], None)
                        proj_drop: Dropout(0.0, is_train=False)
                    )
                )
            )
            linear_q_in: Linear(512, 512, float32[512,], None)
            linear_k_in: Linear(512, 512, float32[512,], None)
            linear_q_out: Linear(512, 1024, float32[1024,], None)
            linear_k_out: Linear(512, 512, float32[512,], None)
        )
        lateral_proj: Linear(1536, 512, float32[512,], None)
        q_proj: Linear(1024, 512, float32[512,], None)
    )
    text_encoder: CLIPTextEncoder(
        transformer: Transformer(
            resblocks: Sequential(
                0: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(512, 512, float32[512,], None)
                    )
                    ln_1: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(512, 2048, float32[2048,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(2048, 512, float32[512,], None)
                    )
                    ln_2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    drop_path: Identity(None, None)
                )
                1: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(512, 512, float32[512,], None)
                    )
                    ln_1: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(512, 2048, float32[2048,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(2048, 512, float32[512,], None)
                    )
                    ln_2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    drop_path: Identity(None, None)
                )
                2: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(512, 512, float32[512,], None)
                    )
                    ln_1: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(512, 2048, float32[2048,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(2048, 512, float32[512,], None)
                    )
                    ln_2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    drop_path: Identity(None, None)
                )
                3: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(512, 512, float32[512,], None)
                    )
                    ln_1: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(512, 2048, float32[2048,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(2048, 512, float32[512,], None)
                    )
                    ln_2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    drop_path: Identity(None, None)
                )
                4: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(512, 512, float32[512,], None)
                    )
                    ln_1: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(512, 2048, float32[2048,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(2048, 512, float32[512,], None)
                    )
                    ln_2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    drop_path: Identity(None, None)
                )
                5: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(512, 512, float32[512,], None)
                    )
                    ln_1: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(512, 2048, float32[2048,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(2048, 512, float32[512,], None)
                    )
                    ln_2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    drop_path: Identity(None, None)
                )
                6: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(512, 512, float32[512,], None)
                    )
                    ln_1: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(512, 2048, float32[2048,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(2048, 512, float32[512,], None)
                    )
                    ln_2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    drop_path: Identity(None, None)
                )
                7: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(512, 512, float32[512,], None)
                    )
                    ln_1: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(512, 2048, float32[2048,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(2048, 512, float32[512,], None)
                    )
                    ln_2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    drop_path: Identity(None, None)
                )
                8: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(512, 512, float32[512,], None)
                    )
                    ln_1: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(512, 2048, float32[2048,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(2048, 512, float32[512,], None)
                    )
                    ln_2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    drop_path: Identity(None, None)
                )
                9: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(512, 512, float32[512,], None)
                    )
                    ln_1: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(512, 2048, float32[2048,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(2048, 512, float32[512,], None)
                    )
                    ln_2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    drop_path: Identity(None, None)
                )
                10: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(512, 512, float32[512,], None)
                    )
                    ln_1: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(512, 2048, float32[2048,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(2048, 512, float32[512,], None)
                    )
                    ln_2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    drop_path: Identity(None, None)
                )
                11: ResidualAttentionBlock(
                    attn: MultiheadAttention(
                        out_proj: Linear(512, 512, float32[512,], None)
                    )
                    ln_1: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    mlp: Sequential(
                        c_fc: Linear(512, 2048, float32[2048,], None)
                        gelu: QuickGELU(None, None)
                        c_proj: Linear(2048, 512, float32[512,], None)
                    )
                    ln_2: LayerNorm((512,), 1e-05, elementwise_affine=True)
                    drop_path: Identity(None, None)
                )
            )
        )
        token_embedding: Embedding(49408, 512, None, dtype=None)
        ln_final: LayerNorm((512,), 1e-05, elementwise_affine=True)
    )
)
Loaded 10582 images
Loaded 1449 images
Fri Aug  2 07:29:58 2024 Start running
Traceback (most recent call last):
  File "/mnt/fast/nobackup/scratch4weeks/ae01116/zegenv/lib/python3.9/site-packages/jittor/dataset/dataset.py", line 258, in _worker_main
    batch.append(self[i])
  File "/mnt/fast/nobackup/users/ae01116/multi-modal-dissertation-uos/jseg/datasets/custom.py", line 129, in __getitem__
    return self.prepare_train_img(idx)
  File "/mnt/fast/nobackup/users/ae01116/multi-modal-dissertation-uos/jseg/datasets/custom.py", line 136, in prepare_train_img
    return self.pipeline(results)
  File "/mnt/fast/nobackup/users/ae01116/multi-modal-dissertation-uos/jseg/datasets/pipelines/compose.py", line 22, in __call__
    data = t(data)
  File "/mnt/fast/nobackup/users/ae01116/multi-modal-dissertation-uos/jseg/datasets/pipelines/formating.py", line 23, in __call__
    results['gt_semantic_seg'] = to_tensor(
  File "/mnt/fast/nobackup/users/ae01116/multi-modal-dissertation-uos/jseg/datasets/pipelines/formating.py", line 8, in to_tensor
    return jt.Var(data)
RuntimeError: Wrong inputs arguments, Please refer to examples(help(jt.__init__)).

Types of your inputs are:
 self	= Var,
 args	= (ndarray, ),

The function declarations are:
 VarHolder(PyObject* v, NanoString dtype=ns_void)

Failed reason:[f 0802 07:30:03.762144 68 helper_cuda.h:128] CUDA error at /mnt/fast/nobackup/scratch4weeks/ae01116/zegenv/lib/python3.9/site-packages/jittor/src/mem/allocator/cuda_host_allocator.cc:22  code=3( cudaErrorInitializationError ) cudaMallocHost(&ptr, size)

Beginning training script
